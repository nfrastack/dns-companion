include: dns-extra.yaml                         # Example: Including another YAML file

general:
  log_level: "info"
  log_timestamps: true
  dry_run: false
  poll_profiles:
    - docker

defaults:
  record:
    type: "A"
    ttl: 300
    # target: "target.example.com"              # (Optional) Set a default target
    update_existing: true
    allow_multiple: false

providers:
  cf_example:
    type: "cloudflare"
    api_token: "your_cloudflare_api_token_here" # <-- Replace with your real Cloudflare API token
    #api_email: "youremail@if.using.global.api"
    #api_key: "global_api_key_here"

  hosts_example:
    type: "hosts"
    source: "./hosts"                           # Path to the hosts file to manage
    user: nobody                                # (optional) Username or UID to own the file
    group: nogroup                              # (optional) Group name or GID to own the file
    mode: 0644                                  # (optional) File permissions (octal, e.g. 0644)
    enable_ipv4: true                           # (optional) Enable IPv4 A records (default: true)
    enable_ipv6: true                           # (optional) Enable IPv6 AAAA records (default: true)
    # Only A and AAAA records are supported. CNAMEs are automatically flattened.

polls:
  docker_example:
    type: "docker"
    host: "unix:///var/run/docker.sock"   #Unix socket
    #api_auth_user: ""
    #api_auth_pass: ""
    #host: "tcp://docker.example.com:2376" #TLS
    expose_containers: true
    filter_type: "none"
    process_existing_containers: false
    record_remove_on_stop: true
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  traefik_example:
    type: traefik
    api_url: http://traefik:8080/api/http/routers
    interval: 30s  # or 60, 1m, 1h, etc.
    config_path: /etc/traefik/dynamic
    process_existing: true  # Process existing routers on startup
    record_remove_on_stop: true  # Remove DNS records when router is removed

  file_example:
    type: file
    source: ./result/records.yaml
    format: yaml # or json (optional, autodetects by extension)
    interval: -1 # watch mode (default)
    process_existing: true
    record_remove_on_stop: true

  remote_example:
    type: remote
    remote_url: https://example.com/records.yaml
    format: yaml # or json (optional, autodetects by extension)
    interval: 30s # Poll every 30 seconds
    process_existing: true
    record_remove_on_stop: true
    remote_auth_user: myuser # Optional HTTP Basic Auth
    remote_auth_pass: mypassword # Optional HTTP Basic Auth

  zerotier_example:
    type: zerotier
    api_url: "https://my.zerotier.com"          # ZeroTier Central or ZT-Net API URL (optional, defaults to ZeroTier Central)
    api_token: "your_zerotier_api_token_here"   # <-- Replace with your real ZeroTier or ZT-Net API token
    # api_type: "zerotier"                      # "zerotier" or "ztnet" (optional, autodetects if omitted)
    interval: 60s                               # Polling interval (optional, default: 60s)
    network_id: "YOUR_NETWORK_ID"               # For ZT-Net: "org:domain.com:networkid" or "domain.com:networkid"
    domain: "zt.example.com"                    # Domain suffix for DNS records (optional)
    online_timeout_seconds: 300                 # Time to consider member offline (default: 60s, recommend 300s+ for stability)
    process_existing: true                      # Process records on startup (default: false)
    record_remove_on_stop: true                 # Remove DNS records when node goes offline (default: false)
    use_address_fallback: true                  # Use ZeroTier address as hostname when name is empty (default: false)
    filter_type: "online"                       # Filter by: online, name, authorized, tag, id, address, nodeid, ipAssignments, physicalAddress
    filter_value: "true"                        # Value for filter_type (default: online=true)
    log_level: "debug"                          # Provider-specific log level override (optional)
    # WARNING: online_timeout_seconds < 120 may cause erratic add/remove behavior due to ZeroTier Central heartbeat timing
    # For ZT-Net, this uses lastSeen timestamp; for ZeroTier Central, uses lastSeen milliseconds

  tailscale_example:
    type: tailscale
    api_url: "https://api.tailscale.com"        # Tailscale API URL (optional, defaults to Tailscale Central, use custom for Headscale)
    api_auth_token: "tskey-auth-xxxxxxxx"       # Personal access token (tskey-auth-*) OR OAuth client token (tskey-client-*)
    # api_auth_id: "client_id_here"             # OAuth client ID (optional, for separate OAuth credentials)
    # network: "your-tailnet"                   # Tailnet name (optional, defaults to "-" for default tailnet)
    domain: "ts.example.com"                    # Domain suffix for DNS records
    interval: 60s                               # Polling interval (optional, default: 60s)
    process_existing: true                      # Process records on startup (default: false)
    record_remove_on_stop: true                 # Remove DNS records when device goes offline (default: false)
    hostname_format: "simple"                   # Hostname format: "simple", "tailscale", "full" (default: "simple")
    # Standard filter syntax (same as other providers)
    filters:
      - type: online                            # Filter by online status
        value: "true"                           # Only include online devices
      - type: name                              # Filter by device name
        value: "server"                         # Include devices with "server" in name
        operation: contains                     # Operations: equals, contains, starts_with, ends_with, regex
      - type: tag                               # Filter by Tailscale tags
        value: "tag:server"                     # Include devices with this tag
        negate: false                           # Set to true to exclude instead
    log_level: "debug"                          # Provider-specific log level override (optional)

domains:
  domainexample:
    name: "example.com"
    provider: "providerexample"
    zone_id: "your_zone_id_here"                # Optional - Only needed for Global API key in Cloudflare
    record:
      type: "A"
      ttl: 60
      target: "192.0.2.1"
      update_existing: true
      allow_multiple: true
    exclude_subdomains:
      - dev
      - staging

outputs:                                    # Output providers write DNS records to files
  zone:                                     # RFC1035 ZoneFile
    path: "./example_com.zone"
    #user: "named"                           # File ownership user (optional)
    #group: "named"                          # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    default_ttl: 300
    soa:
      primary_ns: "ns1.example.com"         # These are needed to enforce validity
      admin_email: "admin@example.com"      # This is needed to enforce validity
      serial: "auto"                        # Auto-increment (YYMMDDHHMMSSXX) or specific number
      refresh: 3600                         # SOA refresh interval
      retry: 900                            # SOA retry interval
      expire: 604800                        # SOA expire time
      minimum: 300                          # SOA minimum TTL
    ns_records:
      - "ns1.example.com"
      - "ns2.example.com"
  hosts:                                    # Export DNS records as /etc/hosts format
    path: "./custom_hosts"
    #user: "root"                           # File ownership user (optional)
    #group: "root"                          # File ownership group (optional)
    #mode: 644                              # File permissions (optional, default: 644)
    enable_ipv4: true                      # Include IPv4 A records (default: true)
    enable_ipv6: true                      # Include IPv6 AAAA records (default: true)
    header_comment: "Generated by dns-companion"  # Custom header comment (optional)
    # Note: Only A and AAAA records are supported. CNAMEs are automatically resolved to IPs.
  yaml:                                     # Export DNS records as YAML
    path: "./example_com.yaml"
    #user: "randomuser"                      # File ownership user (optional)
    #group: "randomgroup"                    # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    generator: "dns-companion"               # Custom generator name (optional)
    #hostname: "server01.example.com"        # Custom hostname identifier (optional)
    comment: "Production for example.com"   # Global comment (optional)
  json:                                     # Export DNS records as JSON
    path: "/var/www/api/dns/example.com.json"
    #user: "www-data"                        # File ownership user (optional)
    #group: "www-data"                       # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    #generator: "dns-companion"              # Custom generator name (optional)
    #hostname: "api-server.example.com"      # Custom hostname identifier (optional)
    #comment: "API-accessible DNS records"   # Global comment (optional)
    indent: true                            # Pretty print JSON (optional, default: true)
