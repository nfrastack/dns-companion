include: dns-extra.yaml                         # Example: Including another YAML file



general:
  log_level: "info"
  log_timestamps: true
  dry_run:  zerotier_example:
    type: zerotier
    api_url: "https://my.zerotier.com"           # ZeroTier Central API URL
    # api_url: "file:///var/run/secrets/zerotier_api_url"  # File-based API URL
    api_token: "your_zerotier_api_token_here"   # <-- Replace with your real ZeroTier or ZT-Net API token
    # api_token: "file:///var/run/secrets/zerotier_token"  # File-based API token
    # api_type: "zerotier"                      # "zerotier" or "ztnet" (optional, autodetects if omitted)
    interval: 60s                               # Polling interval (optional, default: 60s)
    network_id: "YOUR_NETWORK_ID"               # For ZT-Net: "org:domain.com:networkid" or "domain.com:networkid"
    # network_id: "file:///var/run/secrets/zerotier_network_id"  # File-based network ID
    domain: "zt.example.com"                    # Domain suffix for DNS records (optional)
    # domain: "file:///var/run/secrets/zerotier_domain"  # File-based domainll_profiles:
    - docker
  output_profiles:                              # List of output profiles to use (optional, defaults to all)
    - hosts
    - json
    # - yaml                                    # Commented out profiles are ignored
    # - zone                                    # Use this to selectively enable only certain outputs

defaults:
  record:
    type: "A"
    ttl: 300
    # target: "target.example.com"              # (Optional) Set a default target
    update_existing: true
    allow_multiple: false

providers:
  cf_example:
    type: "cloudflare"
    api_token: "your_cloudflare_api_token_here" # <-- Replace with your real Cloudflare API token
    # Alternatively, use file:// to read from a secure file:
    # api_token: "file:///var/run/secrets/cloudflare_token"
    #api_email: "youremail@if.using.global.api"
    #api_key: "global_api_key_here"
    # File-based credentials for legacy auth:
    # api_email: "file:///var/run/secrets/cloudflare_email"
    # api_key: "file:///var/run/secrets/cloudflare_key"

polls:
  caddy_example:
    type: "caddy"
    api_url: "https://caddy.api.local/config/"
    # api_url: "file:///var/run/secrets/caddy_api_url"  # File-based API URL
    #api_auth_user: ""
    # api_auth_user: "file:///var/run/secrets/caddy_user"  # File-based auth user
    #api_auth_pass: ""
    # api_auth_pass: "file:///var/run/secrets/caddy_pass"  # File-based auth password
    filter:
      - type: host
        conditions:
          - value: "*.localhost"
    process_existing: true
    record_remove_on_stop: true
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  docker_example:
    type: "docker"
    api_url: "unix:///var/run/docker.sock"   #Unix socket
    # api_url: "file:///var/run/secrets/docker_api_url"  # File-based API URL
    #api_auth_user: ""
    # api_auth_user: "file:///var/run/secrets/docker_user"  # File-based auth user
    #api_auth_pass: ""
    # api_auth_pass: "file:///var/run/secrets/docker_pass"  # File-based auth password
    #api_url: "tcp://docker.example.com:2376" #TLS
    expose_containers: true
    filter:
      - type: label
        conditions:
          - key: environment
            value: production
    process_existing: false
    record_remove_on_stop: true
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  file_example:
    type: file
    source: ./result/records.yaml
    format: yaml # or json (optional, autodetects by extension)
    interval: -1 # watch mode (default)
    process_existing: true
    record_remove_on_stop: true
    filter:
      - type: hostname
        conditions:
          - value: "*.example.com"

  remote_example:
    type: remote
    remote_url: https://example.com/records.yaml
    # remote_url: "file:///var/run/secrets/remote_url"  # File-based remote URL
    format: yaml # or json (optional, autodetects by extension)
    interval: 30s # Poll every 30 seconds
    process_existing: true
    record_remove_on_stop: true
    remote_auth_user: myuser # Optional HTTP Basic Auth
    # remote_auth_user: "file:///var/run/secrets/remote_user"  # File-based auth user
    remote_auth_pass: mypassword # Optional HTTP Basic Auth
    # remote_auth_pass: "file:///var/run/secrets/remote_pass"  # File-based auth password
    filter:
      - type: hostname
        conditions:
          - value: "*.example.com"
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  tailscale_example:
    type: tailscale
    api_key: "your_tailscale_api_key_here"      # Personal access token (tskey-api-*) or API key
    # api_key: "file:///var/run/secrets/tailscale_token"  # File-based token
    # api_auth_token: "your_oauth_client_secret" # OAuth client secret (alternative to api_key)
    # api_auth_token: "file:///var/run/secrets/tailscale_oauth_secret"  # File-based OAuth secret
    # api_auth_id: "your_oauth_client_id"       # OAuth client ID (required with api_auth_token)
    # api_auth_id: "file:///var/run/secrets/tailscale_oauth_id"  # File-based OAuth client ID
    api_url: "https://api.tailscale.com/api/v2" # API URL (optional, defaults to Tailscale Central)
    # api_url: "file:///var/run/secrets/tailscale_api_url"  # File-based API URL
    tailnet: "-"                                # Tailnet ID or namespace (optional, defaults to "-" for default tailnet)
    # tailnet: "file:///var/run/secrets/tailscale_tailnet"  # File-based tailnet ID
    domain: "ts.example.com"                    # Domain suffix for DNS records
    # domain: "file:///var/run/secrets/tailscale_domain"  # File-based domain
    interval: 120s                              # Polling interval (optional, default: 120s)
    hostname_format: "simple"                   # Hostname format: "simple", "tailscale", "full" (default: "simple")
    process_existing: true                      # Process records on startup (default: false)
    record_remove_on_stop: true                 # Remove DNS records when device goes offline (default: false)
    # Modern filtering (defaults to online=true if no filters specified)
    filter:
      - type: online
        conditions:
          - value: "true"
    log_level: "debug"                          # Provider-specific log level override (optional)
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  traefik_example:
    type: traefik
    api_url: http://traefik:8080/api/http/routers
    interval: 30s  # or 60, 1m, 1h, etc.
    config_path: /etc/traefik/dynamic
    process_existing: true  # Process existing routers on startup
    record_remove_on_stop: true  # Remove DNS records when router is removed
    filter:
      - type: name
        conditions:
          - value: ^websecure-.*
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

  zerotier_example:
    type: zerotier
    api_url: "https://my.zerotier.com"          # ZeroTier Central or ZT-Net API URL (optional, defaults to ZeroTier Central)
    api_token: "your_zerotier_api_token_here"   # <-- Replace with your real ZeroTier or ZT-Net API token
    # api_token: "file:///var/run/secrets/zerotier_token"  # File-based API token
    # api_type: "zerotier"                      # "zerotier" or "ztnet" (optional, autodetects if omitted)
    interval: 60s                               # Polling interval (optional, default: 60s)
    network_id: "YOUR_NETWORK_ID"               # For ZT-Net: "org:domain.com:networkid" or "domain.com:networkid"
    # network_id: "file:///var/run/secrets/zerotier_network_id"  # File-based network ID
    domain: "zt.example.com"                    # Domain suffix for DNS records (optional)
    # domain: "file:///var/run/secrets/zerotier_domain"  # File-based domain
    online_timeout_seconds: 300                 # Time to consider member offline (default: 60s, recommend 300s+ for stability)
    process_existing: true                      # Process records on startup (default: false)
    record_remove_on_stop: true                 # Remove DNS records when node goes offline (default: false)
    use_address_fallback: true                  # Use ZeroTier address as hostname when name is empty (default: false)
    filter:
      - type: online
        conditions:
          - value: "true"
      - type: authorized
        operation: AND
        conditions:
          - value: "true"
    log_level: "debug"                          # Provider-specific log level override (optional)
    # WARNING: online_timeout_seconds < 120 may cause erratic add/remove behavior due to ZeroTier Central heartbeat timing
    # For ZT-Net, this uses lastSeen timestamp; for ZeroTier Central, uses lastSeen milliseconds
    #tls:
    #  verify: true
    #  ca: "/etc/docker/certs/ca.pem"
    #  cert: "/etc/docker/certs/cert.pem"
    #  key: "/etc/docker/certs/key.pem"

domains:
  domainexample:
    name: "example.com"
    provider: "cf_example"
    zone_id: "your_zone_id_here"                # Optional - Only needed for Global API key in Cloudflare
    record:
      type: "A"
      ttl: 60
      target: "192.0.2.1"
      update_existing: true
      allow_multiple: true
    exclude_subdomains:
      - dev
      - staging


api:                                           # API configuration for receiving data from other dns-companion instances
  enabled: false                               # Set to true to enable API server
  port: "8080"                                 # Port to listen on (default: 8080)
  listen:                                      # Interface patterns to listen on (optional)
    - "all"                                    # Listen on all interfaces (default if not specified)
    # - "192.168.1.100"                       # Listen on specific IP address
    # - "eth0"                                # Listen on specific interface
    # - "enp*"                                # Listen on all interfaces matching pattern (e.g., enp0s3, enp1s0)
    # - "!lo"                                 # Exclude loopback interface
    # - "!docker*"                            # Exclude all Docker interfaces
    # - "*"                                   # Listen on all interfaces (same as "all")
  endpoint: "/api/dns"                         # HTTP endpoint path (default: /api/dns)
  client_expiry: "10m"                         # How long to keep client data (default: 10m)
  log_level: "info"                           # API server log level override (optional)
  profiles:                                    # Client profiles with tokens and output routing
    server101:
      token: "server101_secret_token_here"     # Direct token string
      output_profile: "aggregated_zones"
    server102:
      token: "file:///var/run/secrets/server102_token"  # Load token from file
      output_profile: "aggregated_zones"
    server103:
      token: "file:///etc/dns-companion/tokens/server103"  # Another file-based token
      output_profile: "special_zones"
  tls:                                        # TLS configuration for HTTPS (optional)
    cert: "/etc/ssl/certs/dns-companion.crt"  # Path to TLS certificate
    key: "/etc/ssl/private/dns-companion.key"  # Path to TLS private key
    ca: "/etc/ssl/ca/client-ca.pem"      # Path to client CA for mutual TLS (optional)

outputs:                                    # Output providers write DNS records to files
  hosts:                                    # Export DNS records as /etc/hosts format
    path: "./custom_hosts"
    #user: "root"                           # File ownership user (optional)
    #group: "root"                          # File ownership group (optional)
    #mode: 644                              # File permissions (optional, default: 644)
    enable_ipv4: true                      # Include IPv4 A records (default: true)
    enable_ipv6: true                      # Include IPv6 AAAA records (default: true)
    header_comment: "Generated by dns-companion"  # Custom header comment (optional)
    # Note: Only A and AAAA records are supported. CNAMEs are automatically resolved to IPs.
  json:                                     # Export DNS records as JSON
    path: "/var/www/api/dns/example.com.json"
    #user: "www-data"                        # File ownership user (optional)
    #group: "www-data"                       # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    #generator: "dns-companion"              # Custom generator name (optional)
    #hostname: "api-server.example.com"      # Custom hostname identifier (optional)
    #comment: "API-accessible DNS records"   # Global comment (optional)
  yaml:                                     # Export DNS records as YAML
    path: "./example_com.yaml"
    #user: "randomuser"                      # File ownership user (optional)
    #group: "randomgroup"                    # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    generator: "dns-companion"               # Custom generator name (optional)
    #hostname: "server01.example.com"        # Custom hostname identifier (optional)
    comment: "Production for example.com"   # Global comment (optional)
  zone:                                     # RFC1035 ZoneFile
    path: "./example_com.zone"
    #user: "named"                           # File ownership user (optional)
    #group: "named"                          # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    default_ttl: 300
    soa:
      primary_ns: "ns1.example.com"         # These are needed to enforce validity
      admin_email: "admin@example.com"      # This is needed to enforce validity
      serial: "auto"                        # Auto-increment (YYMMDDHHMMSSXX) or specific number
      refresh: 3600                         # SOA refresh interval
      retry: 900                            # SOA retry interval
      expire: 604800                        # SOA expire time
      minimum: 300                          # SOA minimum TTL
    ns_records:
      - "ns1.example.com"
      - "ns2.example.com"
  aggregated_zones:                         # Output profile for aggregated DNS records from multiple clients
    path: "./aggregated-zones"              # Directory for aggregated zone files
    #user: "named"                           # File ownership user (optional)
    #group: "named"                          # File ownership group (optional)
    #mode: 644                               # File permissions (optional, default: 644)
    default_ttl: 300
    soa:
      primary_ns: "ns1.example.com"
      admin_email: "admin@example.com"
      serial: "auto"
      refresh: 3600
      retry: 900
      expire: 604800
      minimum: 300
    ns_records:
      - "ns1.example.com"
      - "ns2.example.com"
  special_zones:                            # Separate output for special clients
    format: zone
    path: "./special-zones/%domain%.zone"
    domains: ["ALL"]                        # Process all domains, create separate files
    #user: "named"
    #group: "named"
    #mode: 644
    default_ttl: 300
    soa:
      primary_ns: "ns1.example.com"
      admin_email: "admin@example.com"
      serial: "auto"
      refresh: 3600
      retry: 900
      expire: 604800
      minimum: 300
    ns_records:
      - "ns1.example.com"
      - "ns2.example.com"
  send_to_api:                              # Push DNS records to remote API server
    format: remote
    url: "https://dns-master.company.com/api/dns"
    # url: "file:///var/run/secrets/dns_api_url"  # File-based URL
    client_id: "server1"                    # Unique client identifier
    # client_id: "file:///var/run/secrets/dns_client_id"  # File-based client ID
    token: "your_bearer_token_here"         # Bearer token for authentication
    # token: "file:///var/run/secrets/dns_api_token"  # File-based token
    timeout: "30s"                         # Request timeout (optional)
    data_format: "json"                     # json or yaml format
    log_level: "info"                      # Output format log level override (optional)
    tls:                                   # TLS configuration (optional)
      verify: true                         # Verify TLS certificates (default: true)
      #ca: "/etc/ssl/ca/server-ca.pem"     # Custom CA certificate (optional)
      #cert: "/etc/ssl/certs/client.pem"   # Client certificate for mutual TLS (optional)
      #key: "/etc/ssl/private/client.key"  # Client private key for mutual TLS (optional)
