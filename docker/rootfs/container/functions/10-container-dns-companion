#!/command/with-contenv bash
# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: BSD-3-Clause

cdc_bootstrap_filesystem() {
    if [ ! -d "${CONFIG_PATH}" ]; then
        mkdir -p "${CONFIG_PATH}"
    fi

    if [ "$(stat -c %U "${CONFIG_PATH}")" != "${CDC_USER}" ] ; then chown "${CDC_USER}":"${CDC_GROUP}" "${CONFIG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        "file" | "both" )
            if [ ! -d "${LOG_PATH}" ]; then
                mkdir -p "${LOG_PATH}"
            fi

            if [ "$(stat -c %U "${LOG_PATH}")" != "${CDC_USER}" ] ; then chown "${CDC_USER}":"${CDC_GROUP}" "${LOG_PATH}" ; fi
            create_logrotate cdc "${LOG_PATH}"/"${LOG_FILE}" cdc cdc cdc
        ;;
    esac
}

cdc_generate_config() {
    if [ ! -f "${CONFIG_PATH}/${CONFIG_FILE}" ]; then
        s6-setuidgid "${CDC_USER}" touch "${CONFIG_PATH}/${CONFIG_FILE}"
    fi

    if [ "${CDC_SETUP_TYPE,,}" = "auto" ]; then
        echo "# Autogenerated configuration file for container-dns-companion" | sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
set -x

        if [ -n "${POLL_TYPE}" ] && [ -z "${POLL_01_TYPE}" ] ; then export POLL_01_TYPE="${POLL_TYPE}" ; unset POLL_TYPE ; fi
        if [ -z "${POLL_01_TYPE}" ] ; then
            print_info "Automatically setting poll type to docker"
            export POLL_01_TYPE="docker"
            export POLL_PROVIDER="docker01"
        fi

        _configGlobal="$(cat <<EOF
[global]
log_level = "${LOG_LEVEL}"
log_timestamps = ${LOG_TIMESTAMPS,,}
log_type = "${LOG_TYPE,,}"
log_file = "${LOG_PATH}/${LOG_FILE}"
poll_profiles = ["${POLL_PROVIDER,,}"]
${DEFAULT_RECORD_TYPE:+dns_record_type = "${DEFAULT_RECORD_TYPE^^}"}
${DEFAULT_TTL:+dns_record_ttl = ${DEFAULT_TTL}}
${DEFAULT_TARGET:+dns_record_target = "${DEFAULT_TARGET}"}
${DEFAULT_UPDATE_EXISTING:+update_existing_record = ${DEFAULT_UPDATE_EXISTING,,}}

EOF
                        )"

        echo "$_configGlobal" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        pollnum=$(printenv | sort | grep -cE '^POLL_([0-9].)_TYPE')
        for (( i = 01; i <= pollnum; i++ )) ; do
            i=$(printf "%02d" $i)
            POLL_TYPE=POLL_${i}_TYPE

            case "${!POLL_TYPE,,}" in
                "docker" )
                    POLL_DOCKER_HOST=POLL_${i}_DOCKER_HOST
                    if [ -z "${!POLL_DOCKER_HOST}" ] ; then
                        POLL_DOCKER_HOST="${DEFAULT_POLL_DOCKER_HOST}"
                    fi
                    POLL_DOCKER_EXPOSE_CONTAINERS=POLL_${i}_DOCKER_EXPOSE_CONTAINERS
                    if [ -z "${!POLL_DOCKER_EXPOSE_CONTAINERS}" ] ; then
                        POLL_DOCKER_EXPOSE_CONTAINERS="${DEFAULT_POLL_DOCKER_EXPOSE_CONTAINERS}"
                    fi
                    #POLL_DOCKER_FILTER_TYPE=POLL_${i}_DOCKER_FILTER_TYPE
                    POLL_DOCKER_FILTER_TYPE="none"  # For now, only 'none' is supported
                    if [ -z "${!POLL_DOCKER_FILTER_TYPE}" ] ; then
                        POLL_DOCKER_FILTER_TYPE="${DEFAULT_POLL_DOCKER_FILTER_TYPE}"
                    fi
                    POLL_DOCKER_PROCESS_EXISTING=POLL_${i}_DOCKER_PROCESS_EXISTING
                    if [ -z "${!POLL_DOCKER_PROCESS_EXISTING}" ] ; then
                        POLL_DOCKER_PROCESS_EXISTING="${DEFAULT_POLL_DOCKER_PROCESS_EXISTING}"
                    fi
                    POLL_DOCKER_SWARM_MODE=POLL_${i}_DOCKER_SWARM_MODE
                    if [ -z "${!POLL_DOCKER_SWARM_MODE}" ] ; then
                        POLL_DOCKER_SWARM_MODE="${DEFAULT_POLL_DOCKER_SWARM_MODE}"
                    fi
                    _configPoll+="$(cat <<EOF

[poll.${!POLL_TYPE,,}${i}]
type = "${!POLL_TYPE,,}"
host = "${POLL_DOCKER_HOST}"
expose_containers = ${POLL_DOCKER_EXPOSE_CONTAINERS,,}
process_existing_containers = ${POLL_DOCKER_PROCESS_EXISTING,,}
filter_type = "${POLL_DOCKER_FILTER_TYPE,,}"
${POLL_DOCKER_SWARM_MODE:+swarm_mode = ${POLL_DOCKER_SWARM_MODE,,}}
${POLL_DOCKER_TLS_VERIFY:+tls_verify = ${POLL_DOCKER_TLS_VERIFY,,}}
${POLL_DOCKER_CERT_PATH:+cert_path = ${POLL_DOCKER_CERT_PATH}}
EOF
                                        )"
                ;;
                "traefik" )
                    # Not built yet but these variables needed:
                    POLL_TRAEFIK_POLL_URL=POLL_${i}_TRAEFIK_POLL_URL
                    if [ -z "${!POLL_TRAEFIK_POLL_URL}" ] ; then
                        POLL_TRAEFIK_POLL_URL="${DEFAULT_POLL_TRAEFIK_POLL_URL}"
                    fi
                    POLL_TRAEFIK_POLL_INTERVAL=POLL_${i}_TRAEFIK_POLL_INTERVAL
                    if [ -z "${!POLL_TRAEFIK_POLL_INTERVAL}" ] ; then
                        POLL_TRAEFIK_POLL_INTERVAL="${DEFAULT_POLL_TRAEFIK_POLL_INTERVAL}"
                    fi
                    POLL_TRAEFIK_FILTER=POLL_${i}_TRAEFIK_FILTER
                    if [ -z "${!POLL_TRAEFIK_FILTER}" ] ; then
                        POLL_TRAEFIK_FILTER="${DEFAULT_POLL_TRAEFIK_FILTER}"
                    fi
                    POLL_TRAEFIK_FILTER_TYPE=POLL_${i}_TRAEFIK_FILTER_TYPE
                    POLL_TRAEFIK_FILTER_TYPE="none"  # For now, only 'none' is supported
                    if [ -z "${!POLL_TRAEFIK_FILTER_TYPE}" ] ; then
                        POLL_TRAEFIK_FILTER_TYPE="${DEFAULT_POLL_TRAEFIK_FILTER_TYPE}"
                    fi
                    _configPoll+="$(cat <<EOF

[poll.${!POLL_TYPE,,}${i}]
type = "${!POLL_TYPE,,}"
poll_url = "${POLL_TRAEFIK_POLL_URL}"
poll_inverval = ${POLL_TRAEFIK_POLL_INTERVAL}
filter_type = "${POLL_TRAEFIK_FILTER_TYPE}"
EOF
                                        )"
                ;;
            esac
        done

        echo "$_configPoll" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        if [ -n "${PROVIDER_TYPE}" ] && [ -z "${PROVIDER_01_TYPE}" ] ; then export PROVIDER_01_TYPE="${PROVIDER_TYPE}" ; unset PROVIDER_TYPE ; fi
        if [ -z "${PROVIDER_01_TYPE}" ] ; then
            print_info "Automatically setting provider type type to Cloudflare"
            export PROVIDER_01_TYPE="cloudflare"
            export PROVIDER_AUTOGENERATE="true"
        fi

        providernum=$(printenv | sort | grep -cE '^PROVIDER_([0-9].)_TYPE')
        for (( i = 01; i <= providernum; i++ )) ; do
            i=$(printf "%02d" $i)
            PROVIDER_TYPE=PROVIDER_${i}_TYPE

            case "${!PROVIDER_TYPE,,}" in
                "cloudflare" )
                    POLL_CLOUDFLARE_API_TOKEN=PROVIDER_${i}_CLOUDFLARE_API_TOKEN
                    POLL_CLOUDFLARE_API_EMAIL=PROVIDER_${i}_CLOUDFLARE_API_EMAIL
                    POLL_CLOUDFLARE_API_KEY=PROVIDER_${i}_CLOUDFLARE_API_KEY

                    if [ -z "${!POLL_CLOUDFLARE_API_TOKEN}" ] && [ -z "${!POLL_CLOUDFLARE_API_EMAIL}" ] && [ -z "${!POLL_CLOUDFLARE_API_KEY}" ]; then
                        print_error "Need to either populate PROVIDER_${i}_CLOUDFLARE_API_TOKEN, or PROVIDER_${i}_CLOUDFLARE_API_TOKEN and PROVIDER_${i}_CLOUDFLARE_API_EMAIL"
                        exit 1
                    fi

                    if [ -n "${!POLL_CLOUDFLARE_API_EMAIL}" ] && [ -z "${!POLL_CLOUDFLARE_API_KEY}" ]; then
                        print_error "Need to populate both PROVIDER_${i}_CLOUDFLARE_API_TOKEN and PROVIDER_${i}_CLOUDFLARE_API_EMAIL"
                        exit 1
                    fi

                    _configProvider+="$(cat <<EOF

[provider.${!PROVIDER_TYPE,,}${i}]
type = "${!PROVIDER_TYPE,,}"
${!POLL_CLOUDFLARE_API_TOKEN:+api_token = ${!POLL_CLOUDFLARE_API_TOKEN}}
${!POLL_CLOUDFLARE_API_EMAIL:+api_email = ${!POLL_CLOUDFLARE_API_EMAIL}}
${!POLL_CLOUDFLARE_API_KEY:+api_key = ${!POLL_CLOUDFLARE_API_KEY}}
EOF
                                        )"

                ;;
            esac
        done
        echo "$_configProvider" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        if [ -n "${DOMAIN_NAME}" ] && [ -z "${DOMAIN_01_NAME}" ] ; then export DOMAIN_01_NAME="${DOMAIN_NAME}" ; unset DOMAIN_NAME ; fi

        if [ -z "${DOMAIN_01_NAME}" ] ; then
            print_error "Need to create DOMAIN_01_NAME variable to configure your domains to update"
            exit 1
        fi

        domainnum=$(printenv | sort | grep -cE '^DOMAIN_([0-9].)_NAME')

        for (( i = 01; i <= domainnum; i++ )) ; do
            i=$(printf "%02d" $i)
            DOMAIN_NAME=DOMAIN_${i}_NAME
            if var_true "${PROVIDER_AUTOGENERATE}" ; then
                export DOMAIN_PROVIDER="cloudflare01"
            else
                DOMAIN_PROVIDER=DOMAIN_${i}_PROVIDER
            fi

            if [ -z "${DOMAIN_PROVIDER}" ] ; then
                print_error "Need to create DOMAIN_${i}_PROVIDER variable to configure which PROVIDER to configure eg '01'"
                exit 1
            fi

            DOMAIN_ZONE_ID=DOMAIN_${i}_ZONE_ID
            DOMAIN_TTL=DOMAIN_${i}_TTL
            DOMAIN_PROXIED=DOMAIN_${i}_PROXIED
            DOMAIN_RECORD_TYPE=DOMAIN_${i}_RECORD_TYPE
            DOMAIN_TARGET=DOMAIN_${i}_TARGET
            DOMAIN_UPDATE_EXISTING_RECORD=DOMAIN_${i}_UPDATE_EXISTING_RECORD

            _configDomain+="$(cat <<EOF

[domain.${i}]
name = "${!DOMAIN_NAME,,}"
provider = "${DOMAIN_PROVIDER,,}"
${!DOMAIN_ZONE_ID:+zone_id = ${!DOMAIN_ZONE_ID}}
${!DOMAIN_PROXIED:+proxied = ${!DOMAIN_PROXIED,,}}
${!DOMAIN_TTL:+ttl = ${!DOMAIN_TTL}}
${!DOMAIN_TARGET:+target = ${!DOMAIN_TARGET,,}}
${!DOMAIN_RECORD_TYPE:+record_type = ${!DOMAIN_RECORD_TYPE^^}}
${!DOMAIN_UPDATE_EXISTING_RECORD:+update_existing_record = ${!DOMAIN_UPDATE_EXISTING_RECORD,,}}
EOF
                            )"
        done

        echo "$_configDomain" | sed '/^$/d' | sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
    else
        print_info "Skipping configuration generation and utilizing defined configuration file."
    fi
}
