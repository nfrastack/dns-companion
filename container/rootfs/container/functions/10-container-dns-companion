#!/command/with-contenv bash
# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: BSD-3-Clause

cdc_bootstrap_filesystem() {
    if [ ! -d "${CONFIG_PATH}" ]; then
        mkdir -p "${CONFIG_PATH}"
    fi

    if [ "$(stat -c %U "${CONFIG_PATH}")" != "${CDC_USER}" ] ; then chown "${CDC_USER}":"${CDC_GROUP}" "${CONFIG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        "file" | "both" )
            if [ ! -d "${LOG_PATH}" ]; then
                mkdir -p "${LOG_PATH}"
            fi

            if [ "$(stat -c %U "${LOG_PATH}")" != "${CDC_USER}" ] ; then chown "${CDC_USER}":"${CDC_GROUP}" "${LOG_PATH}" ; fi
            create_logrotate cdc "${LOG_PATH}"/"${LOG_FILE}" cdc cdc cdc
        ;;
    esac
}

cdc_generate_config() {
    if [ ! -f "${CONFIG_PATH}/${CONFIG_FILE}" ]; then
        s6-setuidgid "${CDC_USER}" touch "${CONFIG_PATH}/${CONFIG_FILE}"
    fi

    if [ "${CDC_SETUP_TYPE,,}" = "auto" ]; then
        echo "# Autogenerated configuration file for container-dns-companion" | sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
set -x

        if [ -n "${POLL_TYPE}" ] && [ -z "${POLL_01_TYPE}" ] ; then export POLL_01_TYPE="${POLL_TYPE}" ; unset POLL_TYPE ; fi
        if [ -z "${POLL_01_TYPE}" ] ; then
            print_info "Automatically setting poll type to docker"
            export POLL_01_TYPE="docker"
            export POLL_PROVIDER="docker01"
        fi

        _configGeneral="$(cat <<EOF
general:
log_level: "${LOG_LEVEL}"
log_timestamps: ${LOG_TIMESTAMPS,,}
log_type: "${LOG_TYPE,,}"
log_file: "${LOG_PATH}/${LOG_FILE}"
${POLL_PROVIDER:+poll_profiles: ["${POLL_PROVIDER,,}"]}

EOF
                        )"

        echo "$_configGeneral" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        if [ -n "${DEFAULT_RECORD_TYPE}" ] || [ -n "${DEFAULT_TTL}" ] || [ -n "${DEFAULT_TARGET}" ] || [ -n "${DEFAULT_UPDATE_EXISTING}" ] || [ -n "${DEFAULT_ALLOW_MULTIPLE}" ]; then
            _configDefaults="$(cat <<EOF            _configDefaultHeader="[default]"
defaults:
  record:
${DEFAULT_RECORD_TYPE:+    type: "${DEFAULT_RECORD_TYPE^^}"}
${DEFAULT_TTL:+    ttl: ${DEFAULT_TTL}}
${DEFAULT_TARGET:+    target: "${DEFAULT_TARGET}"}
${DEFAULT_UPDATE_EXISTING:+    update_existing: ${DEFAULT_UPDATE_EXISTING,,}}
${DEFAULT_ALLOW_MULTIPLE:+    allow_multiple: ${DEFAULT_ALLOW_MULTIPLE,,}}

            echo "$_configDefaults" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
            echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        fi

        echo "polls:" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        pollnum=$(printenv | sort | grep -cE '^POLL_([0-9].)_TYPE')
        for (( i = 01; i <= pollnum; i++ )) ; do
            i=$(printf "%02d" $i)
            POLL_TYPE=POLL_${i}_TYPE

            case "${!POLL_TYPE,,}" in
                "docker" )
                    POLL_DOCKER_HOST=POLL_${i}_DOCKER_HOST
                    if [ -z "${!POLL_DOCKER_HOST}" ] ; then
                        POLL_DOCKER_HOST="${DEFAULT_POLL_DOCKER_HOST}"
                    fi
                    POLL_DOCKER_EXPOSE_CONTAINERS=POLL_${i}_DOCKER_EXPOSE_CONTAINERS
                    if [ -z "${!POLL_DOCKER_EXPOSE_CONTAINERS}" ] ; then
                        POLL_DOCKER_EXPOSE_CONTAINERS="${DEFAULT_POLL_DOCKER_EXPOSE_CONTAINERS}"
                    fi
                    #POLL_DOCKER_FILTER_TYPE=POLL_${i}_DOCKER_FILTER_TYPE
                    POLL_DOCKER_FILTER_TYPE="none"  # For now, only 'none' is supported
                    if [ -z "${!POLL_DOCKER_FILTER_TYPE}" ] ; then
                        POLL_DOCKER_FILTER_TYPE="${DEFAULT_POLL_DOCKER_FILTER_TYPE}"
                    fi
                    POLL_DOCKER_PROCESS_EXISTING=POLL_${i}_DOCKER_PROCESS_EXISTING
                    if [ -z "${!POLL_DOCKER_PROCESS_EXISTING}" ] ; then
                        POLL_DOCKER_PROCESS_EXISTING="${DEFAULT_POLL_DOCKER_PROCESS_EXISTING}"
                    fi
                    POLL_DOCKER_SWARM_MODE=POLL_${i}_DOCKER_SWARM_MODE
                    if [ -z "${!POLL_DOCKER_SWARM_MODE}" ] ; then
                        POLL_DOCKER_SWARM_MODE="${DEFAULT_POLL_DOCKER_SWARM_MODE}"
                    fi

                    POLL_DOCKER_TLS_CA_PATH=POLL_${i}_DOCKER_TLS_CA_PATH
                    POLL_DOCKER_TLS_CERT_PATH=POLL_${i}_DOCKER_TLS_CERT_PATH
                    POLL_DOCKER_TLS_KEY_PATH=POLL_${i}_DOCKER_TLS_KEY_PATH
                    POLL_DOCKER_TLS_VERIFY=POLL_${i}_DOCKER_TLS_VERIFY

                    if [ -n "${POLL_DOCKER_TLS_CA_PATH}" ] || [ -n "${POLL_DOCKER_TLS_CERT_PATH}" ] || [ -n "${POLL_DOCKER_TLS_KEY_PATH}" ] || [ -n "${POLL_DOCKER_TLS_VERIFY}" ]; then
                        _configPollDocker_TLS="$(cat <<EOF
    tls:
${POLL_DOCKER_TLS_CA_PATH:+      ca: ${POLL_DOCKER_TLS_CA_PATH}}
${POLL_DOCKER_TLS_CERT_PATH:+      cert: ${POLL_DOCKER_TLS_CERT_PATH}}
${POLL_DOCKER_TLS_KEY_PATH:+      key: ${POLL_DOCKER_TLS_KEY_PATH}}
${POLL_DOCKER_TLS_VERIFY:+      verify: ${POLL_DOCKER_TLS_VERIFY,,}}
EOF
                                              )"
                    fi
                    _configPoll+="$(cat <<EOF
  ${!POLL_TYPE,,}${i}:
    type: "${!POLL_TYPE,,}"
    host: "${POLL_DOCKER_HOST}"
    expose_containers: ${POLL_DOCKER_EXPOSE_CONTAINERS,,}
    filter_type: "${POLL_DOCKER_FILTER_TYPE,,}"
    process_existing_containers: ${POLL_DOCKER_PROCESS_EXISTING,,}
    record_remove_on_stop: ${POLL_DOCKER_RECORD_REMOVE_ON_STOP,,}
${POLL_DOCKER_SWARM_MODE:+    swarm_mode: ${POLL_DOCKER_SWARM_MODE,,}}
${_configPollDocker_TLS:+${_configPollDockerTLS}
EOF
                                        )"
                ;;
                "traefik" )
                    POLL_TRAEFIK_POLL_URL=POLL_${i}_TRAEFIK_POLL_URL
                    if [ -z "${!POLL_TRAEFIK_POLL_URL}" ] ; then
                        POLL_TRAEFIK_POLL_URL="${DEFAULT_POLL_TRAEFIK_POLL_URL}"
                    fi
                    POLL_TRAEFIK_API_AUTH_USER=POLL_${i}_TRAEFIK_API_AUTH_USER
                    if [ -z "${!POLL_TRAEFIK_API_AUTH_USER}" ] ; then
                        POLL_TRAEFIK_API_AUTH_USER="${DEFAULT_POLL_TRAEFIK_API_AUTH_USER}"
                    fi
                    POLL_TRAEFIK_API_AUTH_PASS=POLL_${i}_TRAEFIK_API_AUTH_PASS
                    if [ -z "${!POLL_TRAEFIK_API_AUTH_PASS}" ] ; then
                        POLL_TRAEFIK_API_AUTH_PASS="${DEFAULT_POLL_TRAEFIK_API_AUTH_PASS}"
                    fi
                    POLL_TRAEFIK_INTERVAL=POLL_${i}_TRAEFIK_INTERVAL
                    if [ -z "${!POLL_TRAEFIK_INTERVAL}" ] ; then
                        POLL_TRAEFIK_INTERVAL="${DEFAULT_POLL_TRAEFIK_INTERVAL}"
                    fi
                    POLL_TRAEFIK_FILTER=POLL_${i}_TRAEFIK_FILTER
                    if [ -z "${!POLL_TRAEFIK_FILTER}" ] ; then
                        POLL_TRAEFIK_FILTER="${DEFAULT_POLL_TRAEFIK_FILTER}"
                    fi
                    POLL_TRAEFIK_PROCESS_EXISTING=POLL_${i}_TRAEFIK_PROCESS_EXISTING
                    if [ -z "${!POLL_TRAEFIK_PROCESS_EXISTING}" ] ; then
                        POLL_TRAEFIK_PROCESS_EXISTING="${DEFAULT_POLL_TRAEFIK_PROCESS_EXISTING}"
                    fi
                    POLL_TRAEFIK_RECORD_REMOVE_ON_STOP=POLL_${i}_TRAEFIK_RECORD_REMOVE_ON_STOP
                    if [ -z "${!POLL_TRAEFIK_RECORD_REMOVE_ON_STOP}" ] ; then
                        POLL_TRAEFIK_RECORD_REMOVE_ON_STOP="${DEFAULT_POLL_TRAEFIK_RECORD_REMOVE_ON_STOP}"
                    fi
                    POLL_TRAEFIK_FILTER_TYPE=POLL_${i}_TRAEFIK_FILTER_TYPE
                    POLL_TRAEFIK_FILTER_TYPE="none"  # For now, only 'none' is supported
                    if [ -z "${!POLL_TRAEFIK_FILTER_TYPE}" ] ; then
                        POLL_TRAEFIK_FILTER_TYPE="${DEFAULT_POLL_TRAEFIK_FILTER_TYPE}"
                    fi
                    POLL_TRAEFIK_FILTER_VALUE=POLL_${i}_TRAEFIK_FILTER_VALUE

                    _configPoll+="$(cat <<EOF

  ${!POLL_TYPE,,}${i}:
    type: "${!POLL_TYPE,,}"
    api_url: "${POLL_TRAEFIK_POLL_URL}"
${!POLL_TRAEFIK_API_AUTH_USER:+    api_auth_user: "${POLL_TRAEFIK_API_AUTH_USER}"}
${!POLL_TRAEFIK_API_AUTH_PASS:+    api_auth_user: "${POLL_TRAEFIK_API_AUTH_PASS}}"}
    inverval: ${POLL_TRAEFIK_INTERVAL}
    process_existing: ${POLL_TRAEFIK_PROCESS_EXISTING,,}
    record_remove_on_stop: ${POLL_TRAEFIK_RECORD_REMOVE_ON_STOP,,}
    filter_type: "${POLL_TRAEFIK_FILTER_TYPE}"
${!POLL_TRAEFIK_FILTER_VALUE:+    filter_value: "${POLL_TRAEFIK_FILTER}"}
EOF
                                        )"
                ;;
            esac
        done

        echo "$_configPoll" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        echo "providers:" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        if [ -n "${PROVIDER_TYPE}" ] && [ -z "${PROVIDER_01_TYPE}" ] ; then export PROVIDER_01_TYPE="${PROVIDER_TYPE}" ; unset PROVIDER_TYPE ; fi
        if [ -z "${PROVIDER_01_TYPE}" ] ; then
            print_info "Automatically setting provider type type to Cloudflare"
            export PROVIDER_01_TYPE="cloudflare"
            export PROVIDER_AUTOGENERATE="true"
        fi

        providernum=$(printenv | sort | grep -cE '^PROVIDER_([0-9].)_TYPE')
        for (( i = 01; i <= providernum; i++ )) ; do
            i=$(printf "%02d" $i)
            PROVIDER_TYPE=PROVIDER_${i}_TYPE

            case "${!PROVIDER_TYPE,,}" in
                "cloudflare" )
                    POLL_CLOUDFLARE_API_TOKEN=PROVIDER_${i}_CLOUDFLARE_API_TOKEN
                    POLL_CLOUDFLARE_API_EMAIL=PROVIDER_${i}_CLOUDFLARE_API_EMAIL
                    POLL_CLOUDFLARE_API_KEY=PROVIDER_${i}_CLOUDFLARE_API_KEY

                    if [ -z "${!POLL_CLOUDFLARE_API_TOKEN}" ] && [ -z "${!POLL_CLOUDFLARE_API_EMAIL}" ] && [ -z "${!POLL_CLOUDFLARE_API_KEY}" ]; then
                        print_error "Need to either populate PROVIDER_${i}_CLOUDFLARE_API_TOKEN, or PROVIDER_${i}_CLOUDFLARE_API_TOKEN and PROVIDER_${i}_CLOUDFLARE_API_EMAIL"
                        exit 1
                    fi

                    if [ -n "${!POLL_CLOUDFLARE_API_EMAIL}" ] && [ -z "${!POLL_CLOUDFLARE_API_KEY}" ]; then
                        print_error "Need to populate both PROVIDER_${i}_CLOUDFLARE_API_TOKEN and PROVIDER_${i}_CLOUDFLARE_API_EMAIL"
                        exit 1
                    fi

                    _configProvider+="$(cat <<EOF

  ${!PROVIDER_TYPE,,}${i}:
    type: "${!PROVIDER_TYPE,,}"
${!POLL_CLOUDFLARE_API_TOKEN:+    api_token: "${!POLL_CLOUDFLARE_API_TOKEN}}"
${!POLL_CLOUDFLARE_API_EMAIL:+    api_email: "${!POLL_CLOUDFLARE_API_EMAIL}}"
${!POLL_CLOUDFLARE_API_KEY:+    api_key: "${!POLL_CLOUDFLARE_API_KEY}}"
EOF
                                        )"

                ;;
            esac
        done
        echo "$_configProvider" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        echo "" | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

        if [ -n "${DOMAIN_NAME}" ] && [ -z "${DOMAIN_01_NAME}" ] ; then export DOMAIN_01_NAME="${DOMAIN_NAME}" ; unset DOMAIN_NAME ; fi

        if [ -z "${DOMAIN_01_NAME}" ] ; then
            print_error "Need to create DOMAIN_01_NAME variable to configure your domains to update"
            exit 1
        fi

        echo "domains:" | sed '/^$/d'  | silent sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        domainnum=$(printenv | sort | grep -cE '^DOMAIN_([0-9].)_NAME')

        for (( i = 01; i <= domainnum; i++ )) ; do
            i=$(printf "%02d" $i)
            DOMAIN_NAME=DOMAIN_${i}_NAME
            if var_true "${PROVIDER_AUTOGENERATE}" ; then
                export DOMAIN_PROVIDER="cloudflare01"
            else
                DOMAIN_PROVIDER=DOMAIN_${i}_PROVIDER
            fi

            if [ -z "${DOMAIN_PROVIDER}" ] ; then
                print_error "Need to create DOMAIN_${i}_PROVIDER variable to configure which PROVIDER to configure eg '01'"
                exit 1
            fi

            DOMAIN_ZONE_ID=DOMAIN_${i}_ZONE_ID
            DOMAIN_TTL=DOMAIN_${i}_TTL
            DOMAIN_PROXIED=DOMAIN_${i}_PROXIED
            DOMAIN_RECORD_TYPE=DOMAIN_${i}_RECORD_TYPE
            DOMAIN_TARGET=DOMAIN_${i}_TARGET
            DOMAIN_UPDATE_EXISTING_RECORD=DOMAIN_${i}_UPDATE_EXISTING_RECORD
            DOMAIN_ALLOW_MULTIPLE=DOMAIN_${i}_ALLOW_MULTIPLE
            DOMAIN_EXCLUDE_SUBDOMAINS=DOMAIN_${i}_EXCLUDE_SUBDOMAINS
            DOMAIN_INCLUDE_SUBDOMAINS=DOMAIN_${i}_INCLUDE_SUBDOMAINS

            _configDomain+="$(cat <<EOF

  domain_${1}:
    name: "${!DOMAIN_NAME,,}"
    provider: "${DOMAIN_PROVIDER,,}"
${!DOMAIN_ZONE_ID:+    zone_id: "${!DOMAIN_ZONE_ID}"}
    record:
${!DOMAIN_PROXIED:+    proxied: ${!DOMAIN_PROXIED,,}}
${!DOMAIN_TTL:+      ttl: ${!DOMAIN_TTL}}
${!DOMAIN_TARGET:+      target: "${!DOMAIN_TARGET,,}"}
${!DOMAIN_RECORD_TYPE:+      type: "${!DOMAIN_RECORD_TYPE^^}"}
${!DOMAIN_UPDATE_EXISTING_RECORD:+      update_existing: ${!DOMAIN_UPDATE_EXISTING_RECORD,,}}
${!DOMAIN_ALLOW_MULTIPLE:+      allow_multiple: ${!DOMAIN_UPDATE_EXISTING_RECORD,,}}
EOF
                            )"

            if [ -n "${!DOMAIN_EXCLUDE_SUBDOMAINS}" ]; then
                _configDomain+="$(cat <<EOF
    exclude_subdomains:
                                )"
                _configDomainexcludeSubdomains="$(echo "${!DOMAIN_EXCLUDE_SUBDOMAINS}" | tr "," "\n" | uniq)"
                for exclude in _configDomainexcludeSubdomains ; do
                    _configDomain+="$(cat <<EOF
      - "${exclude}"
EOF
                                )"
                done
            fi

            if [ -n "${!DOMAIN_INCLUDE_SUBDOMAINS}" ]; then
                _configDomain+="$(cat <<EOF
    include_subdomains:
                                )"
                _configDomainincludeSubdomains="$(echo "${!DOMAIN_INCLUDE_SUBDOMAINS}" | tr "," "\n" | uniq)"
                for include in _configDomainincludeSubdomains ; do
                    _configDomain+="$(cat <<EOF
      - "${include}"
EOF
                                )"
                done
            fi

        echo "$_configDomain" | sed '/^$/d' | sudo -u "${CDC_USER}" tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
    else
        print_info "Skipping configuration generation and utilizing defined configuration file."
    fi
}
