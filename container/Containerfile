# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: BSD-3-Clause

ARG DISTRO=alpine
ARG DISTRO_VARIANT=3.21

FROM docker.io/nfrastack/container-base:${DISTRO}_${DISTRO_VARIANT}

LABEL \
  org.opencontainers.image.title="DNS Companion" \
  org.opencontainers.image.description="Manage DNS records based on DNS servers based on events from Docker or Traefik" \
  org.opencontainers.image.url="https://hub.docker.com/r/nfrastack/dns-companion" \
  org.opencontainers.image.documentation="https://github.com/nfrastack/dns-companion/blob/main/README.md" \
  org.opencontainers.image.source="https://github.com/nfrastack/dns-companion.git" \
  org.opencontainers.image.authors="Nfrastack <code@nfrastack.com>" \
  org.opencontainers.image.vendor="Nfrastack <https://www.nfrastack.com>" \
  org.opencontainers.image.licenses="BSD-3-Clause"

ARG DC_VERSION
ARG GOLANG_VERSION

ENV CONTAINER_ENABLE_SCHEDULING=TRUE \
    DC_VERSION=${DC_VERSION:-"dev"} \
    DC_USER=dc \
    DC_GROUP=dc \
    IMAGE_VERSION=${DC_VERSION} \
    IMAGE_NAME="nfrastack/dns-companion" \
    IMAGE_REPO_URL="https://github.com/nfrastack/dns-companion"

COPY / /usr/src/dns-companion

RUN echo "" && \
    DC_BUILD_DEPS_ALPINE=" \
                                go \
                                make \
                          " \
                          && \
    \
    DC_BUILD_DEPS_DEBIAN=" \
                                make \
                          " \
                          && \
    \
    echo "" && \
    source /container/base/functions/container/build && \
    \
    mkdir -p /usr/src/container/ && \
    cp \
        /usr/src/dns-companion/{CHANGELOG.md,LICENSE,README.md} \
                                                /usr/src/container/ \
                                                && \
    \
    container_build_log && \
    \
    create_user "${DC_USER}" 1000 "${DC_GROUP}" 1000 /dev/null && \
    package update && \
    package upgrade && \
    package install \
                    DC_BUILD_DEPS \
                    && \
    \
    case "$(container_info distro)" in \
        "debian" ) \
            mkdir -p /usr/local/go ; \
            GOLANG_VERSION=${GOLANG_VERSION:-"$(curl -sSL https://golang.org/VERSION?m=text | head -n1 | sed "s|^go||g")"} ; \
            curl -sSLk  https://dl.google.com/go/go${GOLANG_VERSION}.linux-$(dpkg --print-architecture).tar.gz | tar xvfz - --strip 1 -C /usr/local/go ; \
            ln -sf /usr/local/go/bin/go /usr/local/bin/ ; \
            ln -sf /usr/local/go/bin/godoc /usr/local/bin/ ; \
            ln -sf /usr/local/go/bin/gfmt /usr/local/bin/ ;  \
        ;; \
    esac ; \
    \
    cd /usr/src/dns-companion && \
    \
    case "$(container_info arch)" in \
        aarch64) \
            GOARCH=amd64 ; \
        ;; \
        x86_64) \
            GOARCH=amd64 ; \
        ;; \
        * ) \
            echo >&2 "Error: unsupported architecture ($(container_info arch))" ; \
            exit 1 ; \
        ;; \
    esac ; \
    \
    make && \
    make install && \
    \
    cp -aR \
                /usr/src/dns-companion/docker/rootfs/*  \
            / && \
    \
    package remove \
                    DC_BUILD_DEPS \
                    && \
    package cleanup && \
    rm -rf \
            /root/go \
            /tmp/* \
            /usr/local/bin/gfmt* \
            /usr/local/bin/go* \
            /usr/local/go

